generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      String     @default("USER")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  loans     Loan[]
  payments  Payment[]
  userRoles UserRole[]
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
  tablePermissions TablePermission[]
  fieldPermissions FieldPermission[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Loan {
  id              String    @id @default(uuid())
  userId          String
  amount          Float
  interestRate    Float
  term            Int
  purpose         String
  collateral      String?
  collateralValue Float?
  status          String    @default("pending")
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  payments        Payment[]
}

model Payment {
  id String @id @default(uuid()) // Primary key
  loanId String
  userId String
  amount Float
  paymentDate DateTime @default(now())
  paymentMethod String
  status String @default("pending")
  notes String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  loan Loan @relation(fields: [loanId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Application {
  id String @id @default(uuid()) // Primary key
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Amount String?
}
model ApplicationParties {
  id String @id @default(uuid()) // Primary key
  applicationId String
  partyId String
  role String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Table and field permission models
model TablePermission {
  id        String   @id @default(uuid())
  roleId    String
  tableName String
  canRead   Boolean  @default(false)
  canCreate Boolean  @default(false)
  canUpdate Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, tableName])
}

model FieldPermission {
  id        String   @id @default(uuid())
  roleId    String
  tableName String
  fieldName String
  canRead   Boolean  @default(false)
  canUpdate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, tableName, fieldName])
}

// Integration models
model Integration {
  id                  String                  @id @default(uuid())
  name                String
  type                String                  // e.g., "email", "payment", "crm"
  description         String
  logoUrl             String?
  isEnabled           Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  configurations      IntegrationConfiguration[]
}

model IntegrationConfiguration {
  id             String     @id @default(uuid())
  integrationId  String
  fieldName      String
  fieldValue     String
  isEncrypted    Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  integration    Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, fieldName])
}

// Model for storing Resend API configuration
model ResendConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  isSecret    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model for storing emails sent through the platform
model Email {
  id            String    @id @default(uuid())
  from          String
  to            String
  cc            String?
  bcc           String?
  subject       String
  body          String    @db.Text
  status        String    @default("draft") // draft, sending, sent, delivered, bounced, complained, delayed, failed
  sentAt        DateTime?
  connectionId  String?
  connectionType String?
  attachments   Json?     @default("[]")
  metadata      Json?     @default("{}")
  senderId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Define relationships if User model is available
  // sender        User      @relation(fields: [senderId], references: [id])
}
